// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: composite.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ZTMChannel;
@class ZTMChannelConfig;
@class ZTMChannelDescription;
@class ZTMChannelInSense;
@class ZTMChannelLayoutConfig;
@class ZTMChannelPermission;
@class ZTMChannelUserIdentity;
@class ZTMChannelViewHead;
@class ZTMChannelViewStyle;
@class ZTMChannelViewTab;
@class ZTMConfigurationSplash;
@class ZTMConfigurationTab;
@class ZTMConfigurationUrlDomain;
@class ZTMConfigurationVersion;
@class ZTMContacts;
@class ZTMContent;
@class ZTMDiscoveryTheme;
@class ZTMDomainObject;
@class ZTMHandPainting;
@class ZTMMovieDescription;
@class ZTMMusicDescription;
@class ZTMPhotoDescription;
@class ZTMPoint;
@class ZTMProductDescription;
@class ZTMPunch;
@class ZTMPunchConfig;
@class ZTMPunchRecord;
@class ZTMPushMessage;
@class ZTMRed;
@class ZTMReply;
@class ZTMSenseAction;
@class ZTMSenseConfig;
@class ZTMSenseFoot;
@class ZTMSensePermission;
@class ZTMSensePush;
@class ZTMSoundDescription;
@class ZTMSpeech;
@class ZTMSticker;
@class ZTMStickerAttach;
@class ZTMStickerCanvas;
@class ZTMStroke;
@class ZTMUserDescription;
@class ZTMVideoConfig;
@class ZTMVideoDescription;
@class ZTMVoteChoice;
@class ZTMVoteConfig;
@class ZTMVoteMessage;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum ZTMStroke_Style

typedef GPB_ENUM(ZTMStroke_Style) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  ZTMStroke_Style_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** 0.5mm画笔 */
  ZTMStroke_Style_Pen1 = 0,

  /** 1.0mm画笔 */
  ZTMStroke_Style_Pen2 = 1,

  /** 2.0mm画笔 */
  ZTMStroke_Style_Pen3 = 2,

  /** 2.0mm橡皮擦 */
  ZTMStroke_Style_Erasing = 3,
};

GPBEnumDescriptor *ZTMStroke_Style_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL ZTMStroke_Style_IsValidValue(int32_t value);

#pragma mark - ZTMCompositeRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ZTMCompositeRoot : GPBRootObject
@end

#pragma mark - ZTMChannel

typedef GPB_ENUM(ZTMChannel_FieldNumber) {
  ZTMChannel_FieldNumber_Id_p = 1,
  ZTMChannel_FieldNumber_Category = 2,
  ZTMChannel_FieldNumber_UserId = 3,
  ZTMChannel_FieldNumber_Name = 4,
  ZTMChannel_FieldNumber_Icon = 5,
  ZTMChannel_FieldNumber_Description_p = 6,
  ZTMChannel_FieldNumber_IsActive = 8,
  ZTMChannel_FieldNumber_IsVerify = 9,
  ZTMChannel_FieldNumber_IsRecommend = 10,
  ZTMChannel_FieldNumber_IsAnonymous = 11,
  ZTMChannel_FieldNumber_CreateAt = 12,
  ZTMChannel_FieldNumber_UpdateAt = 13,
  ZTMChannel_FieldNumber_SenseCount = 14,
  ZTMChannel_FieldNumber_SubscribeTimes = 15,
  ZTMChannel_FieldNumber_UpdateDescAt = 16,
  ZTMChannel_FieldNumber_LastPostAt = 17,
  ZTMChannel_FieldNumber_User = 101,
  ZTMChannel_FieldNumber_LayoutConfig = 102,
  ZTMChannel_FieldNumber_ChannelConfig = 103,
  ZTMChannel_FieldNumber_SenseConfig = 104,
  ZTMChannel_FieldNumber_ChannelPermission = 106,
  ZTMChannel_FieldNumber_SensePermission = 107,
  ZTMChannel_FieldNumber_RefsArray = 108,
  ZTMChannel_FieldNumber_IsFollow = 109,
  ZTMChannel_FieldNumber_IsTopping = 110,
  ZTMChannel_FieldNumber_UnreadSenseCount = 111,
  ZTMChannel_FieldNumber_OwnSenseCount = 112,
  ZTMChannel_FieldNumber_TodayPunchTimes = 113,
  ZTMChannel_FieldNumber_MyAttitude = 114,
  ZTMChannel_FieldNumber_Puch = 115,
};

@interface ZTMChannel : GPBMessage

/** ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 分类 */
@property(nonatomic, readwrite) int32_t category;

/** 频道创建人的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** 频道名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 频道ICON */
@property(nonatomic, readwrite, copy, null_resettable) NSString *icon;

/** 频道描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** 是否活动的频道 */
@property(nonatomic, readwrite) int32_t isActive;

/** 是否审核通过 */
@property(nonatomic, readwrite) int32_t isVerify;

/** 是否是推荐 */
@property(nonatomic, readwrite) int32_t isRecommend;

/** 是否匿名, 一般匿名的频道都会增加[匿名]前缀 */
@property(nonatomic, readwrite) int32_t isAnonymous;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 更新时间 */
@property(nonatomic, readwrite) uint32_t updateAt;

/** 频道感言发表次数 */
@property(nonatomic, readwrite) int32_t senseCount;

/** 订阅次数 */
@property(nonatomic, readwrite) int32_t subscribeTimes;

/** 描述更新时间 */
@property(nonatomic, readwrite) uint32_t updateDescAt;

/** 最近发布感言的时间 */
@property(nonatomic, readwrite) uint32_t lastPostAt;

/** 频道创建人 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMUserDescription *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

/** 布局配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMChannelLayoutConfig *layoutConfig;
/** Test to see if @c layoutConfig has been set. */
@property(nonatomic, readwrite) BOOL hasLayoutConfig;

/** 频道的配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMChannelConfig *channelConfig;
/** Test to see if @c channelConfig has been set. */
@property(nonatomic, readwrite) BOOL hasChannelConfig;

/** 感言的统一配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMSenseConfig *senseConfig;
/** Test to see if @c senseConfig has been set. */
@property(nonatomic, readwrite) BOOL hasSenseConfig;

/** 频道权限 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMChannelPermission *channelPermission;
/** Test to see if @c channelPermission has been set. */
@property(nonatomic, readwrite) BOOL hasChannelPermission;

/** 感言权限 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMSensePermission *sensePermission;
/** Test to see if @c sensePermission has been set. */
@property(nonatomic, readwrite) BOOL hasSensePermission;

/** 友情频道 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannelDescription*> *refsArray;
/** The number of items in @c refsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger refsArray_Count;

/** 是否关注 */
@property(nonatomic, readwrite) int32_t isFollow;

/** 是否置顶 */
@property(nonatomic, readwrite) int32_t isTopping;

/** 未读感言数量 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *unreadSenseCount;

/** 自己发送感言的数量 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *ownSenseCount;

/** 当天打卡次数 */
@property(nonatomic, readwrite) int32_t todayPunchTimes;

/** 我的态度 */
@property(nonatomic, readwrite) int32_t myAttitude;

/** 打卡状况 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMPunch *puch;
/** Test to see if @c puch has been set. */
@property(nonatomic, readwrite) BOOL hasPuch;

@end

#pragma mark - ZTMChannelConfig

typedef GPB_ENUM(ZTMChannelConfig_FieldNumber) {
  ZTMChannelConfig_FieldNumber_UserIdentitiesArray = 1,
  ZTMChannelConfig_FieldNumber_Video = 2,
  ZTMChannelConfig_FieldNumber_Punch = 3,
  ZTMChannelConfig_FieldNumber_Vote = 4,
  ZTMChannelConfig_FieldNumber_MediaPageURL = 5,
  ZTMChannelConfig_FieldNumber_MediaType = 20,
};

@interface ZTMChannelConfig : GPBMessage

/** 频道主要参与者 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannelUserIdentity*> *userIdentitiesArray;
/** The number of items in @c userIdentitiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger userIdentitiesArray_Count;

/** 视频配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMVideoConfig *video;
/** Test to see if @c video has been set. */
@property(nonatomic, readwrite) BOOL hasVideo;

/** 打卡配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMPunchConfig *punch;
/** Test to see if @c punch has been set. */
@property(nonatomic, readwrite) BOOL hasPunch;

/** 投票配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMVoteConfig *vote;
/** Test to see if @c vote has been set. */
@property(nonatomic, readwrite) BOOL hasVote;

/** 媒体页 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *mediaPageURL;

/** 频道支持的媒体类型，负值：全媒体，1：图片，2：音频，3：图片与音频的支持（就是1&2）4：视频。。。 */
@property(nonatomic, readwrite) uint32_t mediaType;

@end

#pragma mark - ZTMChannelLayoutConfig

typedef GPB_ENUM(ZTMChannelLayoutConfig_FieldNumber) {
  ZTMChannelLayoutConfig_FieldNumber_Head = 1,
  ZTMChannelLayoutConfig_FieldNumber_DefaultTab = 2,
  ZTMChannelLayoutConfig_FieldNumber_TabsArray = 3,
  ZTMChannelLayoutConfig_FieldNumber_StylesArray = 4,
};

@interface ZTMChannelLayoutConfig : GPBMessage

/** 频道头部 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMChannelViewHead *head;
/** Test to see if @c head has been set. */
@property(nonatomic, readwrite) BOOL hasHead;

/** 默认的频道index */
@property(nonatomic, readwrite) int32_t defaultTab;

/** 频道标签页 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannelViewTab*> *tabsArray;
/** The number of items in @c tabsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tabsArray_Count;

/** 频道颜色样式 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannelViewStyle*> *stylesArray;
/** The number of items in @c stylesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stylesArray_Count;

@end

#pragma mark - ZTMSense

typedef GPB_ENUM(ZTMSense_FieldNumber) {
  ZTMSense_FieldNumber_Id_p = 1,
  ZTMSense_FieldNumber_Category = 2,
  ZTMSense_FieldNumber_ChannelId = 3,
  ZTMSense_FieldNumber_UserId = 4,
  ZTMSense_FieldNumber_CreateAt = 5,
  ZTMSense_FieldNumber_UpdateAt = 6,
  ZTMSense_FieldNumber_IsFolded = 7,
  ZTMSense_FieldNumber_IsActive = 8,
  ZTMSense_FieldNumber_Likes = 9,
  ZTMSense_FieldNumber_Views = 10,
  ZTMSense_FieldNumber_PunchTimes = 11,
  ZTMSense_FieldNumber_User = 101,
  ZTMSense_FieldNumber_Channel = 102,
  ZTMSense_FieldNumber_Content = 103,
  ZTMSense_FieldNumber_ReplyCount = 104,
  ZTMSense_FieldNumber_RepliesArray = 105,
  ZTMSense_FieldNumber_IsLiked = 106,
  ZTMSense_FieldNumber_MyChoice = 107,
};

@interface ZTMSense : GPBMessage

/** ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 分类 */
@property(nonatomic, readwrite) int32_t category;

/** 频道ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelId;

/** 发布人ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 更新时间 */
@property(nonatomic, readwrite) uint32_t updateAt;

/** 是否折叠了 0：否，1：是 */
@property(nonatomic, readwrite) int32_t isFolded;

/** 是否活动 0：否，1：是 */
@property(nonatomic, readwrite) int32_t isActive;

/** 同感数 */
@property(nonatomic, readwrite) int32_t likes;

/** 查看数 */
@property(nonatomic, readwrite) int32_t views;

/** 发送该感言时打卡次数 */
@property(nonatomic, readwrite) int32_t punchTimes;

/** 发送感言的用户 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMUserDescription *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

/** 所属频道 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMChannel *channel;
/** Test to see if @c channel has been set. */
@property(nonatomic, readwrite) BOOL hasChannel;

/** 内容 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMContent *content;
/** Test to see if @c content has been set. */
@property(nonatomic, readwrite) BOOL hasContent;

/** 回复数量 */
@property(nonatomic, readwrite) int32_t replyCount;

/** 少量的回复 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMReply*> *repliesArray;
/** The number of items in @c repliesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger repliesArray_Count;

/** 是否同感过 */
@property(nonatomic, readwrite) int32_t isLiked;

/** 针对投票我的选择 */
@property(nonatomic, readwrite) int32_t myChoice;

@end

#pragma mark - ZTMSenseConfig

typedef GPB_ENUM(ZTMSenseConfig_FieldNumber) {
  ZTMSenseConfig_FieldNumber_Foot = 1,
  ZTMSenseConfig_FieldNumber_ActionsArray = 2,
  ZTMSenseConfig_FieldNumber_Push = 3,
};

@interface ZTMSenseConfig : GPBMessage

/** 感言注脚 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMSenseFoot *foot;
/** Test to see if @c foot has been set. */
@property(nonatomic, readwrite) BOOL hasFoot;

/** 感言可拥有的操作 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMSenseAction*> *actionsArray;
/** The number of items in @c actionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actionsArray_Count;

/** 感言的推送响应 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMSensePush *push;
/** Test to see if @c push has been set. */
@property(nonatomic, readwrite) BOOL hasPush;

@end

#pragma mark - ZTMContent

typedef GPB_ENUM(ZTMContent_FieldNumber) {
  ZTMContent_FieldNumber_ContentId = 1,
  ZTMContent_FieldNumber_Txt = 2,
  ZTMContent_FieldNumber_Photo = 3,
  ZTMContent_FieldNumber_Movie = 4,
  ZTMContent_FieldNumber_Music = 5,
  ZTMContent_FieldNumber_Video = 6,
  ZTMContent_FieldNumber_Sound = 7,
  ZTMContent_FieldNumber_Channel = 9,
  ZTMContent_FieldNumber_Product = 11,
  ZTMContent_FieldNumber_MediaType = 20,
};

@interface ZTMContent : GPBMessage

/** 内容的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *contentId;

/** 文字 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txt;

/** 照片 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMPhotoDescription *photo;
/** Test to see if @c photo has been set. */
@property(nonatomic, readwrite) BOOL hasPhoto;

/** 电影 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMMovieDescription *movie;
/** Test to see if @c movie has been set. */
@property(nonatomic, readwrite) BOOL hasMovie;

/** 音乐 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMMusicDescription *music;
/** Test to see if @c music has been set. */
@property(nonatomic, readwrite) BOOL hasMusic;

/** 视频 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMVideoDescription *video;
/** Test to see if @c video has been set. */
@property(nonatomic, readwrite) BOOL hasVideo;

/** 音频 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMSoundDescription *sound;
/** Test to see if @c sound has been set. */
@property(nonatomic, readwrite) BOOL hasSound;

/** 频道 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMChannelInSense *channel;
/** Test to see if @c channel has been set. */
@property(nonatomic, readwrite) BOOL hasChannel;

/** 商品 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMProductDescription *product;
/** Test to see if @c product has been set. */
@property(nonatomic, readwrite) BOOL hasProduct;

/** 媒体类型，0：仅文字，1：图片，2：音频，3：图片与音频的组合（就是1&2）4：视频 */
@property(nonatomic, readwrite) uint32_t mediaType;

@end

#pragma mark - ZTMPunch

typedef GPB_ENUM(ZTMPunch_FieldNumber) {
  ZTMPunch_FieldNumber_PunchesArray = 1,
  ZTMPunch_FieldNumber_TotalPunches = 2,
  ZTMPunch_FieldNumber_TotalJoiners = 3,
  ZTMPunch_FieldNumber_PunchDesc = 4,
  ZTMPunch_FieldNumber_PunchStatusArray = 5,
  ZTMPunch_FieldNumber_PunchTimes = 6,
  ZTMPunch_FieldNumber_IsPunched = 7,
};

@interface ZTMPunch : GPBMessage

/** 一段用于显示折线图的打卡记录 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMPunchRecord*> *punchesArray;
/** The number of items in @c punchesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger punchesArray_Count;

/** 打卡总次数 */
@property(nonatomic, readwrite) int32_t totalPunches;

/** 打卡总人数 */
@property(nonatomic, readwrite) int32_t totalJoiners;

/** 打卡状况描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *punchDesc;

/** 所在周打卡情况 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *punchStatusArray;
/** The number of items in @c punchStatusArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger punchStatusArray_Count;

/** 自己打卡次数 */
@property(nonatomic, readwrite) int32_t punchTimes;

/** 当天是否已经打卡 */
@property(nonatomic, readwrite) int32_t isPunched;

@end

#pragma mark - ZTMVoteConfig

typedef GPB_ENUM(ZTMVoteConfig_FieldNumber) {
  ZTMVoteConfig_FieldNumber_Total = 1,
  ZTMVoteConfig_FieldNumber_ChoicesArray = 2,
};

@interface ZTMVoteConfig : GPBMessage

/** 投票总计 */
@property(nonatomic, readwrite) int32_t total;

/** 投票可选值 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMVoteChoice*> *choicesArray;
/** The number of items in @c choicesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger choicesArray_Count;

@end

#pragma mark - ZTMAppConfiguration

typedef GPB_ENUM(ZTMAppConfiguration_FieldNumber) {
  ZTMAppConfiguration_FieldNumber_URLDomain = 1,
  ZTMAppConfiguration_FieldNumber_Ios = 2,
  ZTMAppConfiguration_FieldNumber_Android = 3,
  ZTMAppConfiguration_FieldNumber_SplashesArray = 4,
  ZTMAppConfiguration_FieldNumber_CenterTab = 5,
  ZTMAppConfiguration_FieldNumber_UserAgreement = 8,
  ZTMAppConfiguration_FieldNumber_OwnerNotice = 9,
  ZTMAppConfiguration_FieldNumber_Faq = 10,
  ZTMAppConfiguration_FieldNumber_ChannelsCreatedId = 30,
  ZTMAppConfiguration_FieldNumber_ChannelsCreatedName = 31,
  ZTMAppConfiguration_FieldNumber_ChannelsCreatedIcon = 32,
  ZTMAppConfiguration_FieldNumber_ChannelsAttitudedId = 33,
  ZTMAppConfiguration_FieldNumber_ChannelsAttitudedName = 34,
  ZTMAppConfiguration_FieldNumber_ChannelsAttitudedIcon = 35,
  ZTMAppConfiguration_FieldNumber_LeanCloudAppId = 50,
  ZTMAppConfiguration_FieldNumber_LeanCloudAppKey = 51,
  ZTMAppConfiguration_FieldNumber_AliPushAppId = 52,
  ZTMAppConfiguration_FieldNumber_AliPushAppKey = 53,
  ZTMAppConfiguration_FieldNumber_XmPushAppKey = 54,
  ZTMAppConfiguration_FieldNumber_XmPushAppId = 55,
  ZTMAppConfiguration_FieldNumber_HwPushAppKey = 56,
  ZTMAppConfiguration_FieldNumber_HwPushAppId = 57,
  ZTMAppConfiguration_FieldNumber_ServiceDialects = 70,
};

@interface ZTMAppConfiguration : GPBMessage

/** url域名列表 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMConfigurationUrlDomain *URLDomain;
/** Test to see if @c URLDomain has been set. */
@property(nonatomic, readwrite) BOOL hasURLDomain;

/** ios版本 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMConfigurationVersion *ios;
/** Test to see if @c ios has been set. */
@property(nonatomic, readwrite) BOOL hasIos;

/** 安卓版本 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMConfigurationVersion *android;
/** Test to see if @c android has been set. */
@property(nonatomic, readwrite) BOOL hasAndroid;

/** 闪屏配置 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMConfigurationSplash*> *splashesArray;
/** The number of items in @c splashesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger splashesArray_Count;

/** 中心标签页配置 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMConfigurationTab *centerTab;
/** Test to see if @c centerTab has been set. */
@property(nonatomic, readwrite) BOOL hasCenterTab;

/** 用户协议 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userAgreement;

/** 频道主须知 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *ownerNotice;

/** 常见问题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *faq;

/** “我的创建”的频道ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelsCreatedId;

/** “我的创建”的频道名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelsCreatedName;

/** “我的创建”的频道ICON */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelsCreatedIcon;

/** “我的态度”的频道ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelsAttitudedId;

/** “我的创建”的频道名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelsAttitudedName;

/** “我的创建”的频道ICON */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelsAttitudedIcon;

/** LeanCloud App Id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *leanCloudAppId;

/** LeanCloud App Key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *leanCloudAppKey;

/** 阿里推送 App Id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aliPushAppId;

/** 阿里推送 App Key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *aliPushAppKey;

/** 小米推送 App Id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *xmPushAppKey;

/** 小米推送 App Key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *xmPushAppId;

/** 华为推送 App Key */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hwPushAppKey;

/** 华为推送 App Id */
@property(nonatomic, readwrite, copy, null_resettable) NSString *hwPushAppId;

/** 用户服务语规则 */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32ObjectDictionary<NSString*> *serviceDialects;
/** The number of items in @c serviceDialects without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger serviceDialects_Count;

@end

#pragma mark - ZTMDiscoveryBanner

typedef GPB_ENUM(ZTMDiscoveryBanner_FieldNumber) {
  ZTMDiscoveryBanner_FieldNumber_Id_p = 1,
  ZTMDiscoveryBanner_FieldNumber_Title = 2,
  ZTMDiscoveryBanner_FieldNumber_Category = 3,
  ZTMDiscoveryBanner_FieldNumber_ThemesArray = 4,
};

@interface ZTMDiscoveryBanner : GPBMessage

/** ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 专题标题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 专题类别 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *category;

/** 专题详情 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMDiscoveryTheme*> *themesArray;
/** The number of items in @c themesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger themesArray_Count;

@end

#pragma mark - ZTMDiscoveryChannels

typedef GPB_ENUM(ZTMDiscoveryChannels_FieldNumber) {
  ZTMDiscoveryChannels_FieldNumber_Title = 1,
  ZTMDiscoveryChannels_FieldNumber_ChannelId = 2,
  ZTMDiscoveryChannels_FieldNumber_Rule = 3,
  ZTMDiscoveryChannels_FieldNumber_ChannelsArray = 4,
  ZTMDiscoveryChannels_FieldNumber_Next = 5,
};

@interface ZTMDiscoveryChannels : GPBMessage

/** 频道列表标题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 频道的ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channelId;

/** 展示规则 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *rule;

/** 一部分频道列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannel*> *channelsArray;
/** The number of items in @c channelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger channelsArray_Count;

/** 下一页连接 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *next;

@end

#pragma mark - ZTMReply

typedef GPB_ENUM(ZTMReply_FieldNumber) {
  ZTMReply_FieldNumber_Id_p = 1,
  ZTMReply_FieldNumber_CreateAt = 2,
  ZTMReply_FieldNumber_TargetType = 3,
  ZTMReply_FieldNumber_Content = 4,
  ZTMReply_FieldNumber_UserId = 5,
  ZTMReply_FieldNumber_ReplyToId = 6,
  ZTMReply_FieldNumber_ReplyToUserId = 7,
  ZTMReply_FieldNumber_TargetId = 8,
  ZTMReply_FieldNumber_TargetUserId = 9,
  ZTMReply_FieldNumber_TargetParentId = 10,
  ZTMReply_FieldNumber_TargetParentUserId = 11,
  ZTMReply_FieldNumber_ContentType = 12,
  ZTMReply_FieldNumber_ContentLength = 13,
  ZTMReply_FieldNumber_TotalPraises = 14,
  ZTMReply_FieldNumber_User = 101,
  ZTMReply_FieldNumber_ReplyToUser = 102,
  ZTMReply_FieldNumber_ReplySource = 103,
  ZTMReply_FieldNumber_IsPraised = 104,
};

@interface ZTMReply : GPBMessage

/** ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 目标类型 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetType;

/** 内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 评论人 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** 回复评论ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *replyToId;

/** 回复评论所有人ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *replyToUserId;

/** 目标ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetId;

/** 目标所有人ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetUserId;

/** 目标父级ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetParentId;

/** 目标父级所有人ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *targetParentUserId;

/**  媒体类型 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *contentType;

/**  媒体长度（毫秒） */
@property(nonatomic, readwrite, copy, null_resettable) NSString *contentLength;

/**  总点赞数 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *totalPraises;

/** 发送人 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMUserDescription *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

/** 被评论人 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMUserDescription *replyToUser;
/** Test to see if @c replyToUser has been set. */
@property(nonatomic, readwrite) BOOL hasReplyToUser;

/** 评论的来源，1最新，2最热 */
@property(nonatomic, readwrite) int32_t replySource;

/** 自己是否点过赞 */
@property(nonatomic, readwrite) int32_t isPraised;

@end

#pragma mark - ZTMUserProfile

typedef GPB_ENUM(ZTMUserProfile_FieldNumber) {
  ZTMUserProfile_FieldNumber_Id_p = 1,
  ZTMUserProfile_FieldNumber_UserName = 2,
  ZTMUserProfile_FieldNumber_Avatar = 3,
  ZTMUserProfile_FieldNumber_IsActive = 4,
  ZTMUserProfile_FieldNumber_Sex = 5,
  ZTMUserProfile_FieldNumber_CreateAt = 6,
  ZTMUserProfile_FieldNumber_CityCode = 7,
  ZTMUserProfile_FieldNumber_TimeZone = 8,
  ZTMUserProfile_FieldNumber_TokenServer = 9,
  ZTMUserProfile_FieldNumber_Tel = 10,
  ZTMUserProfile_FieldNumber_OpenId = 11,
  ZTMUserProfile_FieldNumber_IsStaff = 12,
  ZTMUserProfile_FieldNumber_IsAgreeOwnerNotice = 13,
  ZTMUserProfile_FieldNumber_CreateSenseCount = 101,
  ZTMUserProfile_FieldNumber_FollowChannelCount = 102,
};

@interface ZTMUserProfile : GPBMessage

/** 用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userName;

/** 用户头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

/** 是否活跃 */
@property(nonatomic, readwrite) int32_t isActive;

/** 性别 */
@property(nonatomic, readwrite) int32_t sex;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 所在城市编码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cityCode;

/** 所在时区 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeZone;

/** 服务器端令牌 (最后登录的) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tokenServer;

/** 手机 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tel;

/** 微信 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *openId;

/**  是否是内部员工 */
@property(nonatomic, readwrite) int32_t isStaff;

/** 是否确定了频道主须知 */
@property(nonatomic, readwrite) int32_t isAgreeOwnerNotice;

/** 创建的感言数 */
@property(nonatomic, readwrite) int32_t createSenseCount;

/** 关注的频道数 */
@property(nonatomic, readwrite) int32_t followChannelCount;

@end

#pragma mark - ZTMUserStatus

typedef GPB_ENUM(ZTMUserStatus_FieldNumber) {
  ZTMUserStatus_FieldNumber_Id_p = 1,
  ZTMUserStatus_FieldNumber_UserName = 2,
  ZTMUserStatus_FieldNumber_Avatar = 3,
  ZTMUserStatus_FieldNumber_IsActive = 4,
  ZTMUserStatus_FieldNumber_Sex = 5,
  ZTMUserStatus_FieldNumber_CreateAt = 6,
  ZTMUserStatus_FieldNumber_CityCode = 7,
  ZTMUserStatus_FieldNumber_TimeZone = 8,
  ZTMUserStatus_FieldNumber_TokenServer = 9,
  ZTMUserStatus_FieldNumber_Tel = 10,
  ZTMUserStatus_FieldNumber_OpenId = 11,
  ZTMUserStatus_FieldNumber_IsStaff = 12,
  ZTMUserStatus_FieldNumber_IsAgreeOwnerNotice = 13,
  ZTMUserStatus_FieldNumber_LoginAt = 101,
  ZTMUserStatus_FieldNumber_JoinChannelsArray = 102,
  ZTMUserStatus_FieldNumber_CreateChannelsArray = 103,
  ZTMUserStatus_FieldNumber_LastOperation = 104,
  ZTMUserStatus_FieldNumber_UpdateAt = 105,
  ZTMUserStatus_FieldNumber_IsOpenFriendship = 106,
};

@interface ZTMUserStatus : GPBMessage

/** 用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userName;

/** 用户头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

/** 是否活跃 */
@property(nonatomic, readwrite) int32_t isActive;

/** 性别 */
@property(nonatomic, readwrite) int32_t sex;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 所在城市编码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cityCode;

/** 所在时区 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeZone;

/** 服务器端令牌 (最后登录的) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tokenServer;

/** 手机 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tel;

/** 微信 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *openId;

/**  是否是内部员工 */
@property(nonatomic, readwrite) int32_t isStaff;

/** 是否确定了频道主须知 */
@property(nonatomic, readwrite) int32_t isAgreeOwnerNotice;

/** 登陆时间 */
@property(nonatomic, readwrite) uint32_t loginAt;

/** 参与过的频道, 保留3个 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannelDescription*> *joinChannelsArray;
/** The number of items in @c joinChannelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger joinChannelsArray_Count;

/** 新创建的频道, 保留3个 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMChannelDescription*> *createChannelsArray;
/** The number of items in @c createChannelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger createChannelsArray_Count;

/** 最后的操作描述 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *lastOperation;

/** 操作更新时间 */
@property(nonatomic, readwrite) uint32_t updateAt;

/** 是否参与找朋友 */
@property(nonatomic, readwrite) int32_t isOpenFriendship;

@end

#pragma mark - ZTMEmoticon

typedef GPB_ENUM(ZTMEmoticon_FieldNumber) {
  ZTMEmoticon_FieldNumber_Id_p = 1,
  ZTMEmoticon_FieldNumber_Name = 2,
  ZTMEmoticon_FieldNumber_Cover = 3,
  ZTMEmoticon_FieldNumber_Author = 4,
  ZTMEmoticon_FieldNumber_IsRsuv = 5,
  ZTMEmoticon_FieldNumber_StickersArray = 6,
};

@interface ZTMEmoticon : GPBMessage

/** ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 表情包名称 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** 封面图片地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cover;

/** 作者 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *author;

/** 是否是精华 */
@property(nonatomic, readwrite) int32_t isRsuv;

/** 表情列表 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMSticker*> *stickersArray;
/** The number of items in @c stickersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stickersArray_Count;

@end

#pragma mark - ZTMContacts

typedef GPB_ENUM(ZTMContacts_FieldNumber) {
  ZTMContacts_FieldNumber_Id_p = 1,
  ZTMContacts_FieldNumber_UserName = 2,
  ZTMContacts_FieldNumber_Avatar = 3,
  ZTMContacts_FieldNumber_IsActive = 4,
  ZTMContacts_FieldNumber_Sex = 5,
  ZTMContacts_FieldNumber_CreateAt = 6,
  ZTMContacts_FieldNumber_CityCode = 7,
  ZTMContacts_FieldNumber_TimeZone = 8,
  ZTMContacts_FieldNumber_TokenServer = 9,
  ZTMContacts_FieldNumber_Tel = 10,
  ZTMContacts_FieldNumber_OpenId = 11,
  ZTMContacts_FieldNumber_IsStaff = 12,
  ZTMContacts_FieldNumber_IsAgreeOwnerNotice = 13,
  ZTMContacts_FieldNumber_CvsId = 101,
  ZTMContacts_FieldNumber_Identity = 102,
  ZTMContacts_FieldNumber_BgColor = 103,
  ZTMContacts_FieldNumber_IsTalker = 104,
  ZTMContacts_FieldNumber_IsBroadcast = 105,
  ZTMContacts_FieldNumber_IsTopping = 106,
  ZTMContacts_FieldNumber_ToppingAt = 107,
  ZTMContacts_FieldNumber_Pinyin = 108,
  ZTMContacts_FieldNumber_IsMyContacts = 109,
  ZTMContacts_FieldNumber_IsMyCvs = 110,
};

@interface ZTMContacts : GPBMessage

/** 用户ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** 用户名 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userName;

/** 用户头像 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

/** 是否活跃 */
@property(nonatomic, readwrite) int32_t isActive;

/** 性别 */
@property(nonatomic, readwrite) int32_t sex;

/** 创建时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 所在城市编码 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cityCode;

/** 所在时区 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeZone;

/** 服务器端令牌 (最后登录的) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tokenServer;

/** 手机 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *tel;

/** 微信 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *openId;

/**  是否是内部员工 */
@property(nonatomic, readwrite) int32_t isStaff;

/** 是否确定了频道主须知 */
@property(nonatomic, readwrite) int32_t isAgreeOwnerNotice;

/** 会话ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *cvsId;

/** 联系人头衔 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *identity;

/** 头衔背景色 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bgColor;

/** 是否能发对话 */
@property(nonatomic, readwrite) int32_t isTalker;

/** 是否是广播联系人 */
@property(nonatomic, readwrite) int32_t isBroadcast;

/** 是否置顶 */
@property(nonatomic, readwrite) int32_t isTopping;

/** 至顶时间 */
@property(nonatomic, readwrite) uint32_t toppingAt;

/** 名称拼音 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pinyin;

/** 是否是自己的联系人 */
@property(nonatomic, readwrite) int32_t isMyContacts;

/** 是否在自己的聊天列表 */
@property(nonatomic, readwrite) int32_t isMyCvs;

@end

#pragma mark - ZTMPushMessage

typedef GPB_ENUM(ZTMPushMessage_FieldNumber) {
  ZTMPushMessage_FieldNumber_Contacts = 1,
  ZTMPushMessage_FieldNumber_Title = 2,
  ZTMPushMessage_FieldNumber_Content = 3,
  ZTMPushMessage_FieldNumber_CreateAt = 4,
  ZTMPushMessage_FieldNumber_Img = 5,
  ZTMPushMessage_FieldNumber_Style = 6,
  ZTMPushMessage_FieldNumber_URL = 7,
  ZTMPushMessage_FieldNumber_IsDev = 8,
  ZTMPushMessage_FieldNumber_Relationship = 9,
};

@interface ZTMPushMessage : GPBMessage

/** 联系人 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMContacts *contacts;
/** Test to see if @c contacts has been set. */
@property(nonatomic, readwrite) BOOL hasContacts;

/** 标题, 可能没有 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *title;

/** 文本信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *content;

/** 推送时间 */
@property(nonatomic, readwrite) uint32_t createAt;

/** 附带图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *img;

/** 点击消息进入的页面样式, 空的话打开该联系人的会话 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *style;

/** 根据样式的信息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** 是否是IOS开发环境 */
@property(nonatomic, readwrite) int32_t isDev;

/** 关系的创建模式, 0, 不创建, 1, 接收消息方创建 */
@property(nonatomic, readwrite) int32_t relationship;

@end

#pragma mark - ZTMTalkMessage

typedef GPB_ENUM(ZTMTalkMessage_FieldNumber) {
  ZTMTalkMessage_FieldNumber_Txt = 1,
  ZTMTalkMessage_FieldNumber_Speech = 2,
  ZTMTalkMessage_FieldNumber_Img = 3,
  ZTMTalkMessage_FieldNumber_Sticker = 4,
  ZTMTalkMessage_FieldNumber_Domain = 5,
  ZTMTalkMessage_FieldNumber_Vote = 6,
  ZTMTalkMessage_FieldNumber_Red = 7,
  ZTMTalkMessage_FieldNumber_IsPush = 8,
  ZTMTalkMessage_FieldNumber_PushMessage = 9,
  ZTMTalkMessage_FieldNumber_SenderName = 10,
  ZTMTalkMessage_FieldNumber_IsBroadcast = 11,
  ZTMTalkMessage_FieldNumber_CreateAt = 12,
};

@interface ZTMTalkMessage : GPBMessage

/** 文本消息, 或富文本消息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txt;

/** 音频消息 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMSpeech *speech;
/** Test to see if @c speech has been set. */
@property(nonatomic, readwrite) BOOL hasSpeech;

/** 图像消息 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *img;

/** 贴图消息, 可以与其他任何类型的消息组合 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMStickerCanvas *sticker;
/** Test to see if @c sticker has been set. */
@property(nonatomic, readwrite) BOOL hasSticker;

/** 对象消息 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMDomainObject *domain;
/** Test to see if @c domain has been set. */
@property(nonatomic, readwrite) BOOL hasDomain;

/** 投票消息 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMVoteMessage *vote;
/** Test to see if @c vote has been set. */
@property(nonatomic, readwrite) BOOL hasVote;

/** 红包消息 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMRed *red;
/** Test to see if @c red has been set. */
@property(nonatomic, readwrite) BOOL hasRed;

/** 服务自动赋值, 是否是推送消息, 决定点击通知之后进入的栏目 */
@property(nonatomic, readwrite) int32_t isPush;

/** 推送的消息, isPush=1是需要该字段 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMPushMessage *pushMessage;
/** Test to see if @c pushMessage has been set. */
@property(nonatomic, readwrite) BOOL hasPushMessage;

/** 消息发送人的名称, isPush=0时需要该字段 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *senderName;

/** 服务自动赋值, 是否是广播, 广播的话就不要启用本地通知 */
@property(nonatomic, readwrite) int32_t isBroadcast;

/** 服务自动赋值, 创建时间, 只有在广播消息查询时用到 */
@property(nonatomic, readwrite) uint32_t createAt;

@end

#pragma mark - ZTMDomainObject

typedef GPB_ENUM(ZTMDomainObject_FieldNumber) {
  ZTMDomainObject_FieldNumber_Style = 1,
  ZTMDomainObject_FieldNumber_URL = 2,
  ZTMDomainObject_FieldNumber_Txt = 3,
  ZTMDomainObject_FieldNumber_Img = 4,
};

@interface ZTMDomainObject : GPBMessage

/** 打开面板的样式 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *style;

/** 地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** 展示文本 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txt;

/** 展示图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *img;

@end

#pragma mark - ZTMVoteMessage

typedef GPB_ENUM(ZTMVoteMessage_FieldNumber) {
  ZTMVoteMessage_FieldNumber_Style = 1,
  ZTMVoteMessage_FieldNumber_URL = 2,
  ZTMVoteMessage_FieldNumber_Txt = 3,
  ZTMVoteMessage_FieldNumber_Img = 4,
  ZTMVoteMessage_FieldNumber_User = 5,
  ZTMVoteMessage_FieldNumber_Choice = 6,
};

@interface ZTMVoteMessage : GPBMessage

/** 打开面板的样式 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *style;

/** 地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** 投票问题 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txt;

/** 展示图片 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *img;

/** 投票人 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMUserDescription *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

/** 投票的选项 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *choice;

@end

#pragma mark - ZTMStickerCanvas

typedef GPB_ENUM(ZTMStickerCanvas_FieldNumber) {
  ZTMStickerCanvas_FieldNumber_AttachedId = 1,
  ZTMStickerCanvas_FieldNumber_AttachedTimestamp = 2,
  ZTMStickerCanvas_FieldNumber_Width = 3,
  ZTMStickerCanvas_FieldNumber_Height = 4,
  ZTMStickerCanvas_FieldNumber_AttachesArray = 5,
};

@interface ZTMStickerCanvas : GPBMessage

/** 被贴图的消息ID */
@property(nonatomic, readwrite, copy, null_resettable) NSString *attachedId;

/** 被贴图的消息时间戳 */
@property(nonatomic, readwrite) uint64_t attachedTimestamp;

/** 贴图区域的宽度 */
@property(nonatomic, readwrite) int32_t width;

/** 贴图区域的高度 */
@property(nonatomic, readwrite) int32_t height;

/** 贴图图层 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMStickerAttach*> *attachesArray;
/** The number of items in @c attachesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attachesArray_Count;

@end

#pragma mark - ZTMStickerAttach

typedef GPB_ENUM(ZTMStickerAttach_FieldNumber) {
  ZTMStickerAttach_FieldNumber_URL = 1,
  ZTMStickerAttach_FieldNumber_Top = 2,
  ZTMStickerAttach_FieldNumber_Left = 3,
  ZTMStickerAttach_FieldNumber_Width = 4,
  ZTMStickerAttach_FieldNumber_Height = 5,
  ZTMStickerAttach_FieldNumber_Roll = 6,
};

@interface ZTMStickerAttach : GPBMessage

/** 图的地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

/** 据顶端距离 */
@property(nonatomic, readwrite) int32_t top;

/** 据左端距离 */
@property(nonatomic, readwrite) int32_t left;

/** 宽度 */
@property(nonatomic, readwrite) int32_t width;

/** 高度 */
@property(nonatomic, readwrite) int32_t height;

/** 旋转角度 */
@property(nonatomic, readwrite) float roll;

@end

#pragma mark - ZTMRed

typedef GPB_ENUM(ZTMRed_FieldNumber) {
  ZTMRed_FieldNumber_Txt = 1,
  ZTMRed_FieldNumber_Cent = 2,
};

@interface ZTMRed : GPBMessage

/** 红包内容 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *txt;

/** 红包金额 分 */
@property(nonatomic, readwrite) int32_t cent;

@end

#pragma mark - ZTMSpeech

typedef GPB_ENUM(ZTMSpeech_FieldNumber) {
  ZTMSpeech_FieldNumber_Duration = 1,
  ZTMSpeech_FieldNumber_URL = 2,
};

@interface ZTMSpeech : GPBMessage

/** 音频时长 */
@property(nonatomic, readwrite) float duration;

/** 音频地址 */
@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

@end

#pragma mark - ZTMHandPaintingWrapped

typedef GPB_ENUM(ZTMHandPaintingWrapped_FieldNumber) {
  ZTMHandPaintingWrapped_FieldNumber_Zipped = 1,
  ZTMHandPaintingWrapped_FieldNumber_Hp = 2,
  ZTMHandPaintingWrapped_FieldNumber_Zip = 3,
};

/**
 * 手工画的包装对象
 **/
@interface ZTMHandPaintingWrapped : GPBMessage

/** TODO 是否压缩过 */
@property(nonatomic, readwrite) BOOL zipped;

/** 未压缩的手工画 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMHandPainting *hp;
/** Test to see if @c hp has been set. */
@property(nonatomic, readwrite) BOOL hasHp;

/** 压缩过的zip字节数组 */
@property(nonatomic, readwrite, copy, null_resettable) NSData *zip;

@end

#pragma mark - ZTMHandPainting

typedef GPB_ENUM(ZTMHandPainting_FieldNumber) {
  ZTMHandPainting_FieldNumber_StrokeColor = 1,
  ZTMHandPainting_FieldNumber_BackgroundColor = 2,
  ZTMHandPainting_FieldNumber_BackgroundMask = 3,
  ZTMHandPainting_FieldNumber_StrokesArray = 4,
};

/**
 * 手工画
 **/
@interface ZTMHandPainting : GPBMessage

/** 画笔颜色 */
@property(nonatomic, readwrite) uint32_t strokeColor;

/** 背景颜色，如果设置了mask该字段无效；或者说backgroundMask优先级更高 */
@property(nonatomic, readwrite) uint32_t backgroundColor;

/** 背景画 */
@property(nonatomic, readwrite, strong, null_resettable) ZTMHandPainting *backgroundMask;
/** Test to see if @c backgroundMask has been set. */
@property(nonatomic, readwrite) BOOL hasBackgroundMask;

/** 画中包含的笔划 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMStroke*> *strokesArray;
/** The number of items in @c strokesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger strokesArray_Count;

@end

#pragma mark - ZTMStroke

typedef GPB_ENUM(ZTMStroke_FieldNumber) {
  ZTMStroke_FieldNumber_Style = 1,
  ZTMStroke_FieldNumber_PointsArray = 2,
};

/**
 * 手工画笔划
 **/
@interface ZTMStroke : GPBMessage

/** 画笔样式 */
@property(nonatomic, readwrite) ZTMStroke_Style style;

/** 笔画着点 */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ZTMPoint*> *pointsArray;
/** The number of items in @c pointsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pointsArray_Count;

@end

/**
 * Fetches the raw value of a @c ZTMStroke's @c style property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t ZTMStroke_Style_RawValue(ZTMStroke *message);
/**
 * Sets the raw value of an @c ZTMStroke's @c style property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetZTMStroke_Style_RawValue(ZTMStroke *message, int32_t value);

#pragma mark - ZTMPoint

typedef GPB_ENUM(ZTMPoint_FieldNumber) {
  ZTMPoint_FieldNumber_X = 1,
  ZTMPoint_FieldNumber_Y = 2,
};

/**
 * 点坐标
 **/
@interface ZTMPoint : GPBMessage

/** 点的X坐标(mm) */
@property(nonatomic, readwrite) int32_t x;

/** 点的Y坐标(mm) */
@property(nonatomic, readwrite) int32_t y;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
